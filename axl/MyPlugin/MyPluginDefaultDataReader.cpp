// /////////////////////////////////////////////////////////////////
// Generated by axel-plugin wizard
// /////////////////////////////////////////////////////////////////

/* (C) MyCompany */


/* Put a short description of your plugin here */

/* MyCompany-contact@mycompany.com-http://www.mycompany.com */

#include "MyPluginDefaultDataReader.h"

#include "MyPluginPlugin.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// MyPluginDefaultDataReader
// /////////////////////////////////////////////////////////////////

MyPluginDefaultDataReader::MyPluginDefaultDataReader(void)
{
    
}

MyPluginDefaultDataReader::~MyPluginDefaultDataReader(void)
{
    
}

QString MyPluginDefaultDataReader::identifier(void) const
{
    return "MyPluginDefaultDataReader";
}

QString MyPluginDefaultDataReader::description(void) const
{
    return "MyPluginDefaultDataReader";
}

QStringList MyPluginDefaultDataReader::handled(void) const
{
    return QStringList() << "MyPluginDefaultData";
}

bool MyPluginDefaultDataReader::registered(void)
{
    return MyPluginPlugin::dataFactSingleton->registerDataReaderType("MyPluginDefaultDataReader", QStringList(), createMyPluginDefaultDataReader);
}

bool MyPluginDefaultDataReader::accept(const QDomNode& node)
{
    QDomElement element = node.toElement();
    
    //    if(element.tagName() != "MyPluginDefaultDataTag")
    //        return false;
    
    return true;
}

bool MyPluginDefaultDataReader::reject(const QDomNode& node)
{
    return !this->accept(node);
}

dtkAbstractData *MyPluginDefaultDataReader::read(const QDomNode& node)
{
    QDomElement element = node.toElement();
    
    //TODO :Parse there your QDomNode node and extract necessaries values to create your new data...
    
    return NULL;
}

dtkAbstractDataReader *createMyPluginDefaultDataReader(void)
{
    return new MyPluginDefaultDataReader;
}

