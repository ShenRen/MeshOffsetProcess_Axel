// /////////////////////////////////////////////////////////////////
// Generated by axel-plugin wizard
// /////////////////////////////////////////////////////////////////

/* (C) MyCompany */


/* Put a short description of your plugin here */

/* MyCompany-contact@mycompany.com-http://www.mycompany.com */

#include "MyPluginPlugin.h"

#include "MyPluginDefaultProcess.h"
#include "MyPluginDefaultProcessDialog.h"
#include "MyPluginDefaultData.h"
#include "MyPluginDefaultDataDialog.h"
#include "MyPluginDefaultDataReader.h"
#include "MyPluginDefaultDataWriter.h"
#include "MyPluginDefaultDataConverter.h"
#include "MyPluginDefaultDataCreatorProcessDialog.h"
#include <axlGui/axlInspectorObjectFactory.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>

#include <dtkLog/dtkLog.h>


// /////////////////////////////////////////////////////////////////
// MyPluginPluginPrivate
// /////////////////////////////////////////////////////////////////

class MyPluginPluginPrivate 
{
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// MyPluginPlugin
// /////////////////////////////////////////////////////////////////

MyPluginPlugin::MyPluginPlugin(QObject *parent) : dtkPlugin(parent), d(new MyPluginPluginPrivate)
{
    
    
}

MyPluginPlugin::~MyPluginPlugin(void)
{
    delete d;
    
    d = NULL;
}

bool MyPluginPlugin::initialize(void)
{
    MyPluginPlugin::dataFactSingleton = dtkAbstractDataFactory::instance();
    //dataFactorySingleton();
    MyPluginPlugin::processFactSingleton = dtkAbstractProcessFactory::instance();
    //processFactorySingleton();
    
    if(!MyPluginDefaultProcess::registered())
        dtkWarn() << "Unable to register MyPluginProcess type";
    
    if(!MyPluginDefaultProcessDialog::registered())
        dtkWarn() << "Unable to register MyPluginProcessDialog type";
    
    if(!MyPluginDefaultData::registered())
        dtkWarn() << "Unable to register MyPluginData type";
    
    if(!MyPluginDefaultDataDialog::registered())
        dtkWarn() << "Unable to register MyPluginDataDialog type";
    
    if(!MyPluginDefaultDataReader::registered())
        dtkWarn() << "Unable to register MyPluginDataReader type";
    
    if(!MyPluginDefaultDataWriter::registered())
        dtkWarn() << "Unable to register MyPluginDataWriter type";
    
    if(!MyPluginDefaultDataConverter::registered())
        dtkWarn() << "Unable to register MyPluginDataConverter type";
    
    if(!MyPluginDefaultDataCreatorProcessDialog::registered())
        dtkWarn() << "Unable to register MyPluginDataCreatorProcessDialog type";
    
    return true;
}

bool MyPluginPlugin::uninitialize(void)
{
    return true;
}

QString MyPluginPlugin::name(void) const
{
    return "MyPluginPlugin";
}

QString MyPluginPlugin::description(void) const
{
    return "Put a short description of your plugin here";
}

QStringList MyPluginPlugin::tags(void) const
{
    return QStringList();
}

QStringList MyPluginPlugin::types(void) const
{
    QStringList stringList;
    stringList << "MyPluginProcess" << "MyPluginProcessDialog";
    
    stringList << "MyPluginData" << "MyPluginDataDialog" <<"MyPluginDataReader" << "MyPluginDataWriter"<<"MyPluginDataConverter" <<"MyPluginDataCreatorProcessDialog";
    
    return stringList;
}

dtkAbstractDataFactory *MyPluginPlugin::dataFactSingleton = NULL;
dtkAbstractProcessFactory *MyPluginPlugin::processFactSingleton = NULL;


Q_EXPORT_PLUGIN2(MyPluginPlugin, MyPluginPlugin)

