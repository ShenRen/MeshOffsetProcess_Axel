// /////////////////////////////////////////////////////////////////
// Generated by axel-plugin wizard
// /////////////////////////////////////////////////////////////////

/* (C) MyCompany */


/* Put a short description of your plugin here */

/* MyCompany-contact@mycompany.com-http://www.mycompany.com */

#include "MyPluginDefaultDataDialog.h"

#include "MyPluginDefaultData.h"

#include <axlCore/axlAbstractData.h>

#include <axlGui/axlInspectorUtils.h>

#include <dtkCore/dtkAbstractData.h>

#include <dtkGui/dtkColorButton.h>
#include <dtkGui/dtkSplitter.h>

#include <QtGui>

class MyPluginDefaultDataDialogPrivate
{
public:
    MyPluginDefaultData *data;
    dtkColorButton *colorButton;
    
    QComboBox *comboBoxShader;
    QCheckBox *checkBoxShader;
    QLineEdit *lineEditShader;
    QPushButton *buttonShader;
    
    QSlider *sliderOpacity;
    
};

MyPluginDefaultDataDialog::MyPluginDefaultDataDialog(QWidget *parent) : axlInspectorObjectInterface(parent), d(new MyPluginDefaultDataDialogPrivate)
{
    d->data = NULL;
    
    d->comboBoxShader = NULL;
    d->sliderOpacity = NULL;
    d->checkBoxShader = NULL;
    d->lineEditShader = NULL;
    d->buttonShader = NULL;
    d->colorButton = NULL;
}

void MyPluginDefaultDataDialog::initWidget(void) {
    
    //OPACITY//
    d->sliderOpacity = new QSlider(Qt::Horizontal, this);
    
    QHBoxLayout *layoutOpacity = new QHBoxLayout;
    layoutOpacity->addWidget(new QLabel("Opacity",this));
    layoutOpacity->addWidget(d->sliderOpacity);
    d->sliderOpacity->setMaximum(100);
    d->sliderOpacity->setValue(initOpacityValue());
    
    //SHADER//
    d->comboBoxShader = new QComboBox(this);
    d->comboBoxShader->setInsertPolicy(QComboBox::InsertAlphabetically);
    d->checkBoxShader = new QCheckBox(this);
    d->lineEditShader = new QLineEdit(this);
    d->buttonShader = new QPushButton(this);
    d->buttonShader->setText("open");
    
    d->lineEditShader->setText(initShaderValue());
    this->initComboBoxShaderValue();
    
    if(d->lineEditShader->text().isEmpty())
    {
        d->lineEditShader->setEnabled(false);
        d->buttonShader->setEnabled(false);
        d->comboBoxShader->setEnabled(false);
    }
    else
        d->checkBoxShader->setChecked(true);
    
    //COLOR//
    d->colorButton = new dtkColorButton(this);
    
    QHBoxLayout *layoutColorButton = new QHBoxLayout;
    layoutColorButton->addWidget(new QLabel("Color",this));
    layoutColorButton->addWidget(d->colorButton);
    d->colorButton->setColor(this->initColorValue());
    
    //GUI//
    QVBoxLayout *layoutShader = new QVBoxLayout;
    QHBoxLayout *layoutShader1 = new QHBoxLayout;
    
    QLabel *labelShader  = new QLabel("Shader",this);
    layoutShader1->addWidget(labelShader);
    layoutShader1->addWidget(d->checkBoxShader);
    layoutShader1->addWidget(d->comboBoxShader);
    layoutShader1->addWidget(d->buttonShader);
    
    layoutShader1->setStretchFactor(labelShader, 2);
    layoutShader1->setStretchFactor(d->checkBoxShader, 1);
    layoutShader1->setStretchFactor(d->comboBoxShader, 4);
    layoutShader1->setStretchFactor(d->buttonShader, 3);
    
    layoutShader->addLayout(layoutShader1);
    layoutShader->addWidget(d->lineEditShader);
    QVBoxLayout *layoutTop = new QVBoxLayout;
    layoutTop->addWidget(new QLabel("MyPluginDefaultDataDialog", this));
    layoutTop->addLayout(layoutColorButton);
    layoutTop->addLayout(layoutOpacity);
    layoutTop->addLayout(layoutShader);
    layoutTop->addStretch(1);
    
    QWidget *top = new QWidget(this);
    top->setMaximumWidth(295);
    top->setLayout(layoutTop);
    
    connect(d->comboBoxShader, SIGNAL(currentIndexChanged(QString)), this, SLOT(onLineEditShaderChanged(QString)));
    connect(d->checkBoxShader, SIGNAL(clicked(bool)), this, SLOT(onShaderStateChanged(bool)));
    connect(d->buttonShader, SIGNAL(clicked()), this, SLOT(openShader()));
    connect(d->colorButton, SIGNAL(colorChanged(QColor)), this, SLOT(onColorChanged(QColor)));
    connect(d->sliderOpacity, SIGNAL(sliderMoved(int)), this, SLOT(onOpacityChanged(int)));
    connect(d->lineEditShader, SIGNAL(textChanged(QString)), this, SLOT(onShaderChanged(QString)));
    
}


MyPluginDefaultDataDialog::~MyPluginDefaultDataDialog(void)
{
    delete d;
    
    d = NULL;
}

bool MyPluginDefaultDataDialog::registered(void)
{
    return axlInspectorObjectFactory::instance()->registerInspectorObject("MyPluginDefaultData", createMyPluginDefaultDataDialog);
}

axlInspectorObjectInterface *createMyPluginDefaultDataDialog(void)
{
    return new MyPluginDefaultDataDialog;
}

QSize MyPluginDefaultDataDialog::sizeHint(void) const
{
    return QSize(300, 300);
}


void MyPluginDefaultDataDialog::setData(dtkAbstractData *data)
{
    if((d->data = dynamic_cast<MyPluginDefaultData *>(data)))
    {
        initWidget();
    }
    
    
}

void MyPluginDefaultDataDialog::onColorChanged(QColor color)
{
    d->data->setColor(color);
    
    emit dataChangedByColor(d->data, color.redF(), color.greenF(), color.blueF());
    
    emit update();
}

void MyPluginDefaultDataDialog::initComboBoxShaderValue(void)
{
    if(d->comboBoxShader)
    {
        // First add item of axlShader.qrc, then find shader from shader path
        QDir dirShader( ":axlShader/shader/");
        dirShader.setFilter(QDir::Files | QDir::Hidden | QDir::NoSymLinks);
        
        QFileInfoList list = dirShader.entryInfoList();
        //        for (int i = 0; i < list.size(); ++i) {
        //            d->comboBoxShader->addItem(list.at(i).fileName());
        //        }
        
        QSettings settings("inria", "dtk");
        QString defaultPath;
        settings.beginGroup("shader");
        QString defaultPathShader = settings.value("path", defaultPath).toString();
        defaultPathShader.append("/");
        
        QDir defaultDirShader(defaultPathShader);
        QStringList filters;
        filters << "*.xml";
        defaultDirShader.setNameFilters(filters);
        QFileInfoList list2 = defaultDirShader.entryInfoList();
        
        list.append(list2);
        
        QStringList items;
        
        for (int i = 0; i < list.size(); ++i) {
            if(!items.contains(list.at(i).fileName()))
                items << list.at(i).fileName();
        }
        
        qSort(items.begin(), items.end(), caseInsensitiveLessThan);
        int indInitShader = -1;
        int indCurrentShader = -1;
        
        
        foreach(QString item, items)
        {
            indCurrentShader++;
            d->comboBoxShader->addItem(item);
            
            QFileInfo currentFileInfo(d->lineEditShader->text());
            
            if(currentFileInfo.exists())
            {
                if(item == currentFileInfo.fileName())
                    indInitShader =indCurrentShader;
            }
        }
        
        //init the value from the lineEditShader.
        if(indInitShader != -1)
            d->comboBoxShader->setCurrentIndex(indInitShader);
        
    }
}

void MyPluginDefaultDataDialog::onLineEditShaderChanged(QString shader)
{
    // First add item of axlShader.qrc, then find shader from shader path
    QDir dirShader( ":axlShader/shader/");
    dirShader.setFilter(QDir::Files | QDir::Hidden | QDir::NoSymLinks);
    
    QFileInfo currentFile(dirShader, shader);
    if(!currentFile.exists())
    {
        QSettings settings("inria", "dtk");
        QString defaultPath;
        settings.beginGroup("shader");
        QString defaultPathShader = settings.value("path", defaultPath).toString();
        defaultPathShader.append("/");
        
        QDir defaultDirShader(defaultPathShader);
        currentFile = QFileInfo(defaultDirShader, shader);
        
    }
    
    d->lineEditShader->setText(currentFile.absoluteFilePath());
}

void MyPluginDefaultDataDialog::openShader()
{
    if(d->lineEditShader->isEnabled())
    {
        QString fileToOpen;
        fileToOpen = QFileDialog::getOpenFileName(this, tr("Open shader"), "", tr("xml document (*.xml)"));
        d->lineEditShader->setText(fileToOpen);
    }
}

void MyPluginDefaultDataDialog::onShaderChanged(QString shader)
{
    d->data->setShader(shader);
    
    emit dataChangedByShader(d->data, d->lineEditShader->text());
    
    emit update();
}

void MyPluginDefaultDataDialog::onShaderStateChanged(bool isShader)
{
    if(isShader)
    {
        d->comboBoxShader->setEnabled(true);
        d->lineEditShader->setEnabled(true);
        d->buttonShader->setEnabled(true);
    }
    else
    {
        d->comboBoxShader->setEnabled(false);
        d->lineEditShader->setEnabled(false);
        d->buttonShader->setEnabled(false);
    }
}

void MyPluginDefaultDataDialog::onOpacityChanged(int opacity)
{
    double opacity_d = 1.0 - 0.01 * opacity; // range from 0.00 to 1.00
    d->data->setOpacity(opacity_d);
    
    emit dataChangedByOpacity(d->data, opacity_d);
    
    emit update();
}

int MyPluginDefaultDataDialog::initOpacityValue(void)
{
    double initOpacity = 0.0;
    double opacity = d->data->opacity();
    if(opacity > initOpacity)
        initOpacity = opacity;
    
    return 100 * (1.0 - initOpacity);
}

QString MyPluginDefaultDataDialog::initShaderValue(void)
{
    return  d->data->shader();
}


QColor MyPluginDefaultDataDialog::initColorValue(void)
{
    return d->data->color();
}

